@page "/transactions"
@using BudgetApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav

<h3>Transakcje</h3>

<p>
    <button class="btn btn-primary" @onclick='() => Nav.NavigateTo("/transactions/create")'>
        + Nowa transakcja
    </button>
</p>

@if (transactions is null)
{
    <p><em>Ładowanie…</em></p>
}
else if (!transactions.Any())
{
    <p>Brak transakcji w tej rodzinie.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Data</th>
                <th>Kwota</th>
                <th>Konto</th>
                <th>Kategoria</th>
                <th>Notatka</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var t in transactions)
        {
            <tr>
                <td>@t.Date.ToString("yyyy-MM-dd")</td>
                <td class="@(t.Amount >= 0 ? "text-success" : "text-danger")">
                    @t.Amount.ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("pl-PL"))
                </td>
                <td>@t.Account.Name</td>
                <td>@t.Category.Name</td>
                <td>@t.Note</td>
                <td>
                    <button class="btn btn-sm btn-primary"
                            @onclick='() => Nav.NavigateTo($"/transactions/edit/{t.Id}")'>
                        Edytuj
                    </button>
                    <button class="btn btn-sm btn-danger ms-1"
                            @onclick="() => Delete(t.Id)">
                        Usuń
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Transaction>? transactions;
    private int? familyId;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)
                   ?? throw new InvalidOperationException("Brak zalogowanego użytkownika");

        familyId = user.FamilyId 
                   ?? throw new InvalidOperationException("Użytkownik nie należy do rodziny");

        transactions = await Db.Transactions
                               .Include(t => t.Account)
                               .Include(t => t.Category)
                               .Where(t => t.FamilyId == familyId)
                               .OrderByDescending(t => t.Date)
                               .ToListAsync();
    }

    private async Task Delete(int id)
    {
        var tx = await Db.Transactions.FindAsync(id);
        if (tx != null)
        {
            Db.Transactions.Remove(tx);
            await Db.SaveChangesAsync();
            transactions?.RemoveAll(t => t.Id == id);
        }
    }
}
