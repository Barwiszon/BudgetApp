@page "/transactions/create"
@using BudgetApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav

<h3>Nowa transakcja</h3>

@if (tx == null)
{
    <p><em>Ładowanie…</em></p>
}
else
{
    <EditForm Model="tx" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Data</label>
            <InputDate class="form-control" @bind-Value="tx.Date" />
        </div>
        <div class="mb-3">
            <label class="form-label">Kwota</label>
            <InputNumber class="form-control" @bind-Value="tx.Amount" />
        </div>
        <div class="mb-3">
            <label class="form-label">Konto</label>
            <InputSelect class="form-select" @bind-Value="tx.AccountId">
                <option value="">— wybierz konto —</option>
                @foreach (var a in accounts)
                {
                    <option value="@a.Id">@a.Name</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label class="form-label">Kategoria</label>
            <InputSelect class="form-select" @bind-Value="tx.CategoryId">
                <option value="">— wybierz kategorię —</option>
                @foreach (var c in categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label class="form-label">Notatka</label>
            <InputText class="form-control" @bind-Value="tx.Note" />
        </div>

        <button class="btn btn-success" type="submit">Dodaj</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">
            Anuluj
        </button>
    </EditForm>
}

@code {
    private Transaction? tx;
    private List<Account> accounts = new();
    private List<Category> categories = new();
    private string userId = "";
    private int familyId;

    protected override async Task OnInitializedAsync()
    {
        // Załaduj usera i FamilyId
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)
                   ?? throw new InvalidOperationException("Brak zalogowanego użytkownika");
        userId = user.Id;
        familyId = user.FamilyId
                   ?? throw new InvalidOperationException("Nie należysz do rodziny");

        // Załaduj konta i kategorie z tej rodziny
        accounts = await Db.Accounts.Where(a => a.FamilyId == familyId).ToListAsync();
        categories = await Db.Categories.Where(c => c.FamilyId == familyId).ToListAsync();

        tx = new Transaction
            {
                Date = DateTime.Today,
                UserId = userId,
                FamilyId = familyId
            };
    }

    private async Task Save()
    {
        if (tx == null) return;
        // pewność nadpisania
        tx.UserId = userId;
        tx.FamilyId = familyId;

        Db.Transactions.Add(tx);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/transactions");
    }

    private void Cancel()
        => Nav.NavigateTo("/transactions");
}
