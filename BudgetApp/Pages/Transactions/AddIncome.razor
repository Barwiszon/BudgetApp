@page "/transactions/income"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using BudgetApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav

<h3>Dodaj wpływ</h3>

@if (userAccount == null)
{
    <div class="alert alert-warning">
        Nie masz jeszcze konta przypisanego do użytkownika.<br />
        <a href="/accounts/create" class="btn btn-primary mt-2">Utwórz konto</a>
    </div>
}
else
{
    <EditForm Model="model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Kwota</label>
            <InputNumber class="form-control" @bind-Value="model.Amount" />
        </div>

        <div class="mb-3">
            <label>Data</label>
            <InputDate class="form-control" @bind-Value="model.Date" />
        </div>

        <div class="mb-3">
            <label>Notatka</label>
            <InputText class="form-control" @bind-Value="model.Note" />
        </div>

        <div class="mb-3">
            <label>Cykliczność</label>
            <InputSelect class="form-select" @bind-Value="model.Repeat">
                @foreach (RecurrenceFrequency freq in Enum.GetValues(typeof(RecurrenceFrequency)))
                {
                    <option value="@freq">@GetFrequencyLabel(freq)</option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-success" type="submit">Dodaj wpływ</button>
    </EditForm>
}

@code {
    private ApplicationUser? user;
    private Account? userAccount;

    private IncomeModel model = new()
        {
            Date = DateTime.Now
        };

    public class IncomeModel
    {
        [Required]
        [Range(0.01, double.MaxValue, ErrorMessage = "Kwota musi być większa od zera")]
        public decimal Amount { get; set; }

        [Required]
        public DateTime Date { get; set; }

        public string? Note { get; set; }

        [Required]
        public RecurrenceFrequency Repeat { get; set; } = RecurrenceFrequency.None;
    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(auth.User)
               ?? throw new InvalidOperationException("Brak użytkownika");

        Console.WriteLine($"Zalogowany użytkownik: {user?.Email}, ID: {user?.Id}");

        userAccount = await Db.Accounts
            .Where(a => a.UserId == user.Id)
            .OrderByDescending(a => a.Id)
            .FirstOrDefaultAsync();

        if (userAccount == null)
        {
            Console.WriteLine("Brak konta użytkownika w bazie.");
        }
    }

    private async Task Save()
{
    Console.WriteLine($"Dodawanie transakcji: AccountId={userAccount?.Id}, UserId={user?.Id}, FamilyId={user?.FamilyId}");

    if (user == null || userAccount == null)
    {
        Console.WriteLine("❌ Brak konta lub użytkownika.");
        return;
    }


    var selectedCategory = await Db.Categories
        .FirstOrDefaultAsync(c =>
            c.UserId == user.Id &&
            (c.Name.ToLower() == "wpływ" || c.Name.ToLower() == "income"));

    if (selectedCategory == null)
    {
        selectedCategory = new Category
        {
            Name = "Wpływ",
            UserId = user.Id,
            FamilyId = user.FamilyId


        };

        Db.Categories.Add(selectedCategory);
        await Db.SaveChangesAsync();
    }

    var tx = new Transaction
    {
        Amount = model.Amount,
        Date = model.Date,
        UserId = user.Id,
        FamilyId = user.FamilyId,
        AccountId = userAccount.Id,
        Note = model.Note,
        Type = TransactionType.Income,
        CategoryId = selectedCategory.Id
    };

    Db.Transactions.Add(tx);

    if (model.Repeat != RecurrenceFrequency.None)
    {
        var recurring = new RecurringIncome
        {
            UserId = user.Id,
            AccountId = userAccount.Id,
            Amount = model.Amount,
            StartDate = model.Date,
            Frequency = model.Repeat,
            Note = model.Note
        };

        Db.RecurringIncomes.Add(recurring);
    }

    await Db.SaveChangesAsync();
        Nav.NavigateTo("/accounts");
}



    private string GetFrequencyLabel(RecurrenceFrequency freq) => freq switch
    {
        RecurrenceFrequency.None => "Jednorazowo",
        RecurrenceFrequency.Monthly => "Co miesiąc",
        RecurrenceFrequency.Weekly => "Co tydzień",
        _ => freq.ToString()
    };
}
