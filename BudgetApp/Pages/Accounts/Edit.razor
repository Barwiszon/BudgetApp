@page "/accounts/edit/{Id:int}"
@using BudgetApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav

<h3>Edytuj konto</h3>

@if (account is null)
{
    <p><em>Ładowanie…</em></p>
}
else
{
    <EditForm Model="account" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nazwa konta</label>
            <InputText class="form-control" @bind-Value="account.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Saldo</label>
            <InputNumber class="form-control" @bind-Value="account.Balance" />
        </div>

        <button class="btn btn-success" type="submit">Zapisz</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">
            Anuluj
        </button>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    private Account? account;
    private string currentUserId = "";
    private int currentFamilyId;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)
                   ?? throw new InvalidOperationException("Brak zalogowanego użytkownika.");

        currentUserId = user.Id;
        currentFamilyId = user.FamilyId ?? throw new InvalidOperationException("Brak FamilyId.");

        account = await Db.Accounts
                          .FirstOrDefaultAsync(a => a.Id == Id && a.FamilyId == currentFamilyId);

        if (account is null)
        {
            Nav.NavigateTo("/accounts");
        }
    }

    private async Task Save()
    {
        if (account is null) return;

        Db.Accounts.Update(account);
        await Db.SaveChangesAsync();

        Nav.NavigateTo("/accounts");
    }

    private void Cancel()
    {
        Nav.NavigateTo("/accounts");
    }
}
