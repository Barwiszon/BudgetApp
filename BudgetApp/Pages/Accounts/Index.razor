@page "/accounts"
@namespace BudgetApp.Pages.Accounts
@using BudgetApp.Data
@using BudgetApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@using Microsoft.AspNetCore.Identity

<h3>Moje konta</h3>

<p>
    <NavLink class="btn btn-success" href="/accounts/create">Dodaj konto</NavLink>
</p>

@if (accounts is null)
{
    <p><em>Ładowanie…</em></p>
}
else if (!accounts.Any())
{
    <p>Brak kont w Twojej rodzinie.</p>
}
else
{
    <table class="table">
        <thead>
            <tr><th>Nazwa</th><th>Saldo</th><th>Akcje</th></tr>
        </thead>
        <tbody>
            @foreach (var a in accounts)
            {
                <tr>
                    <td>@a.Name</td>
                    <td>@a.Balance:C</td>
                    <td>
                        <NavLink class="btn btn-sm btn-primary"
                                 href="@($"/accounts/edit/{a.Id}")">
                            Edytuj
                        </NavLink>
                        <NavLink class="btn btn-sm btn-danger"
                                 href="@($"/accounts/delete/{a.Id}")">
                            Usuń
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Account>? accounts;

    protected override async Task OnInitializedAsync()
    {
        // 1. Pobierz stan uwierzytelnienia i samego usera
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)
                   ?? throw new InvalidOperationException("Brak zalogowanego użytkownika.");

        // 2. Filtruj konta po FamilyId
        accounts = await Db.Accounts
            .Where(a => a.FamilyId == user.FamilyId)
            .ToListAsync();
    }
}
