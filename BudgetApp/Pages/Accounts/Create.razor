@page "/accounts/create"
@using BudgetApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize]
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav

<h3>Nowe konto</h3>

<EditForm Model="account" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nazwa konta</label>
        <InputText class="form-control" @bind-Value="account.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Saldo początkowe</label>
        <InputNumber class="form-control" @bind-Value="account.Balance" />
    </div>

    <button class="btn btn-success" type="submit">Dodaj konto</button>
    <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">
        Anuluj
    </button>
</EditForm>

@code {
    private Account account = new();
    private string currentUserId = "";
    private int currentFamilyId;

    protected override async Task OnInitializedAsync()
    {
        // Pobierz zalogowanego użytkownika
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)
                   ?? throw new InvalidOperationException("Brak użytkownika");

        currentUserId = user.Id;
        currentFamilyId = user.FamilyId ?? throw new InvalidOperationException("Brak FamilyId");

        // Przygotuj nowy obiekt do wypełnienia
        account = new Account
            {
                Name = string.Empty,
                Balance = 0,
                UserId = currentUserId,
                FamilyId = currentFamilyId
            };
    }

    private async Task Save()
    {
        // Upewnij się, że wartości kluczy są poprawne
        account.UserId = currentUserId;
        account.FamilyId = currentFamilyId;

        Db.Accounts.Add(account);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/accounts");
    }

    private void Cancel()
    {
        Nav.NavigateTo("/accounts");
    }
}
