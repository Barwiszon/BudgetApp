@page "/family/edit"
@using BudgetApp.Data
@using BudgetApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav

<h3>Zarządzanie rodziną</h3>

@if (family is null)
{
    <p><em>Ładowanie…</em></p>
}
else
{
    <EditForm Model="family" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nazwa rodziny</label>
            <InputText class="form-control" @bind-Value="family.Name" />
        </div>

        <button class="btn btn-success" type="submit">Zapisz zmiany</button>
        @if (isOwner)
        {
            <button class="btn btn-danger ms-2" @onclick="ConfirmDelete">Usuń rodzinę</button>
        }
        else
        {
            <span class="ms-2 text-muted">Tylko właściciel może usunąć rodzinę</span>
        }
    </EditForm>

    <h5 class="mt-4">Członkowie</h5>
    <table class="table">
        <thead><tr><th>Email</th><th></th></tr></thead>
        <tbody>
            @foreach (var u in family.Members)
            {
                <tr>
                    <td>@u.Email</td>
                    <td>
                        @if (isOwner && u.Id != currentUserId && u.Id != family.CreatedByUserId)
                        {
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick="() => RemoveMember(u.Id)">
                                Usuń
                            </button>
                        }
                        else if (u.Id == family.CreatedByUserId)
                        {
                            <span class="badge bg-success">Owner</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-outline-danger" @onclick="LeaveFamily">Opuść rodzinę</button>
}

@code {
    private Family? family;
    private bool isOwner = false;
    private string currentUserId = "";

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)
                   ?? throw new InvalidOperationException("Brak zalogowanego użytkownika");

        currentUserId = user.Id;

        family = await Db.Families
          .Include(f => f.Members)
          .FirstOrDefaultAsync(f => f.Id == user.FamilyId)
          ?? throw new InvalidOperationException("Użytkownik nie należy do rodziny");

        isOwner = user.Id == family.CreatedByUserId;
    }

    private async Task Save()
    {
        Db.Families.Update(family!);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/family");
    }

    private async Task RemoveMember(string userId)
    {
        if (!isOwner)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Tylko właściciel może usuwać członków rodziny.");
            return;
        }

        var u = await Db.Users.FindAsync(userId);
        if (u != null && u.Id != family!.CreatedByUserId)
        {
            u.FamilyId = null;
            await Db.SaveChangesAsync();
            family.Members.Remove(u);
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete()
    {
        if (!isOwner)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Tylko właściciel rodziny może ją usunąć.");
            return;
        }

        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Czy na pewno usunąć rodzinę “{family!.Name}”?"))
            return;

        foreach (var u in family!.Members)
            u.FamilyId = null;
        Db.Families.Remove(family!);
        await Db.SaveChangesAsync();
        Nav.NavigateTo("/");
    }

    private async Task LeaveFamily()
    {
        var user = await UserManager.GetUserAsync((await AuthStateProvider.GetAuthenticationStateAsync()).User);

        if (user != null && user.FamilyId != null)
        {
            user.FamilyId = null;
            await Db.SaveChangesAsync();
            Nav.NavigateTo("/");
        }
    }

    [Inject] private IJSRuntime JsRuntime { get; set; } = default!;
}
