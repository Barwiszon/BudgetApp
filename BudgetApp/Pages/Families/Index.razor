@page "/family"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using BudgetApp.Models
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext Db
@inject NavigationManager Nav

<h3>Rodzina: @family?.Name</h3>

@if (isLoading)
{
    <p><em>Ładowanie…</em></p>
}
else if (user == null)
{
    @* nie zalogowany *@
    
}
else if (user.FamilyId == null)
{
    @* nie ma rodziny — sprawdź zaproszenia *@
    @if (invites?.Any() == true)
    {
        <h5>Masz zaproszenia:</h5>
        <ul class="list-group mb-3">
            @foreach (var inv in invites)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Zaproszenie do rodziny „@inv.Family?.Name”
                    <button class="btn btn-sm btn-success"
                            @onclick="() => AcceptInvite(inv.Id)">
                        Akceptuj
                    </button>
                </li>
            }
        </ul>
    }
    else
    {
        @* ani rodziny, ani zaproszeń — idź tworzyć *@
        
    }
}
else
{
    @* należy do rodziny *@
    <p>
        <button class="btn btn-primary"
                @onclick='() => Nav.NavigateTo("/members/invite")'>
            <span class="oi oi-person"></span> Zaproś nowego członka
        </button>
        <button class="btn btn-secondary ms-2"
                @onclick='() => Nav.NavigateTo("/family/edit")'>
            <span class="oi oi-cog"></span> Zarządzaj rodziną
        </button>
    </p>

    <h5>Członkowie:</h5>
    <table class="table table-striped">
        <thead><tr><th>Email</th><th>Rola</th></tr></thead>
        <tbody>
            @foreach (var u in family.Members)
            {
                <tr>
                    <td>@u.Email</td>
                    <td>
                        @if (u.Id == family.CreatedByUserId)
                        {
                            <span class="badge bg-success">Owner</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Member</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ApplicationUser? user;
    private Family? family;
    private List<FamilyInvite>? invites;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(auth.User);

        if (user == null)
        {
            Nav.NavigateTo("/Identity/Account/Login", forceLoad: true);
            return;
        }

        if (user.FamilyId == null)
            invites = await Db.Invites.Where(i => i.Email == user.Email).ToListAsync();
        else
            family = await Db.Families.Include(f => f.Members)
                                      .FirstOrDefaultAsync(f => f.Id == user.FamilyId);

        if (user.FamilyId == null && (invites?.Any() ?? false) == false)
        {
            Nav.NavigateTo("/family/create", forceLoad: true);
            return;
        }

        isLoading = false;
    }
    private async Task AcceptInvite(string token)
    {
        // dokładnie to samo co w OnInitializedAsync powyżej
        var inv = invites!.FirstOrDefault(i => i.Id == token);
        if (inv is null) return;

        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User)!;

        user.FamilyId = inv.FamilyId;
        await UserManager.UpdateAsync(user);

        Db.Invites.Remove(inv);
        await Db.SaveChangesAsync();

        Nav.NavigateTo("/family");
    }
}
